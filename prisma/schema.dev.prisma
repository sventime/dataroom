// Development schema (SQLite)
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  datarooms     Dataroom[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Dataroom {
  id        String   @id @default(cuid())
  name      String   @default("Data Room")
  userId    String
  shareToken String  @unique @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  nodes     DataroomNode[]
  shareLinks ShareLink[]
}

model ShareLink {
  id            String   @id @default(cuid())
  token         String   @unique @default(cuid())
  dataroomId    String
  sharedFolderId String?
  createdAt     DateTime @default(now())
  expiresAt     DateTime?
  
  dataroom      Dataroom @relation(fields: [dataroomId], references: [id], onDelete: Cascade)
  sharedFolder  DataroomNode? @relation(fields: [sharedFolderId], references: [id], onDelete: Cascade)
}

model DataroomNode {
  id        String   @id @default(cuid())
  name      String
  type      NodeType
  parentId  String?
  dataroomId String
  
  // File-specific fields
  filePath  String?  // Server file path
  mimeType  String?
  size      Int?     @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  dataroom  Dataroom @relation(fields: [dataroomId], references: [id], onDelete: Cascade)
  parent    DataroomNode? @relation("NodeHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  DataroomNode[] @relation("NodeHierarchy")
  shareLinks ShareLink[]
  
  @@index([dataroomId, parentId])
}

enum NodeType {
  FOLDER
  FILE
}